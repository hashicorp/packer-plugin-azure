// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package keyvaultsecret

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	Name                    *string `mapstructure:"name" required:"true" cty:"name" hcl:"name"`
	KeyvaultId              *string `mapstructure:"keyvault_id" required:"true" cty:"keyvault_id" hcl:"keyvault_id"`
	CloudEnvironmentName    *string `mapstructure:"cloud_environment_name" required:"false" cty:"cloud_environment_name" hcl:"cloud_environment_name"`
	MetadataHost            *string `mapstructure:"metadata_host" required:"false" cty:"metadata_host" hcl:"metadata_host"`
	ClientID                *string `mapstructure:"client_id" cty:"client_id" hcl:"client_id"`
	ClientSecret            *string `mapstructure:"client_secret" cty:"client_secret" hcl:"client_secret"`
	ClientCertPath          *string `mapstructure:"client_cert_path" cty:"client_cert_path" hcl:"client_cert_path"`
	ClientCertExpireTimeout *string `mapstructure:"client_cert_token_timeout" required:"false" cty:"client_cert_token_timeout" hcl:"client_cert_token_timeout"`
	ClientJWT               *string `mapstructure:"client_jwt" cty:"client_jwt" hcl:"client_jwt"`
	ObjectID                *string `mapstructure:"object_id" cty:"object_id" hcl:"object_id"`
	TenantID                *string `mapstructure:"tenant_id" required:"false" cty:"tenant_id" hcl:"tenant_id"`
	SubscriptionID          *string `mapstructure:"subscription_id" cty:"subscription_id" hcl:"subscription_id"`
	UseAzureCLIAuth         *bool   `mapstructure:"use_azure_cli_auth" required:"false" cty:"use_azure_cli_auth" hcl:"use_azure_cli_auth"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"name":                      &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"keyvault_id":               &hcldec.AttrSpec{Name: "keyvault_id", Type: cty.String, Required: false},
		"cloud_environment_name":    &hcldec.AttrSpec{Name: "cloud_environment_name", Type: cty.String, Required: false},
		"metadata_host":             &hcldec.AttrSpec{Name: "metadata_host", Type: cty.String, Required: false},
		"client_id":                 &hcldec.AttrSpec{Name: "client_id", Type: cty.String, Required: false},
		"client_secret":             &hcldec.AttrSpec{Name: "client_secret", Type: cty.String, Required: false},
		"client_cert_path":          &hcldec.AttrSpec{Name: "client_cert_path", Type: cty.String, Required: false},
		"client_cert_token_timeout": &hcldec.AttrSpec{Name: "client_cert_token_timeout", Type: cty.String, Required: false},
		"client_jwt":                &hcldec.AttrSpec{Name: "client_jwt", Type: cty.String, Required: false},
		"object_id":                 &hcldec.AttrSpec{Name: "object_id", Type: cty.String, Required: false},
		"tenant_id":                 &hcldec.AttrSpec{Name: "tenant_id", Type: cty.String, Required: false},
		"subscription_id":           &hcldec.AttrSpec{Name: "subscription_id", Type: cty.String, Required: false},
		"use_azure_cli_auth":        &hcldec.AttrSpec{Name: "use_azure_cli_auth", Type: cty.Bool, Required: false},
	}
	return s
}

// FlatDatasourceOutput is an auto-generated flat version of DatasourceOutput.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatDatasourceOutput struct {
	Id          *string            `mapstructure:"id" cty:"id" hcl:"id"`
	Value       *string            `mapstructure:"value" cty:"value" hcl:"value"`
	ContentType *string            `mapstructure:"content_type" cty:"content_type" hcl:"content_type"`
	Tags        map[string]*string `mapstructure:"tags" cty:"tags" hcl:"tags"`
}

// FlatMapstructure returns a new FlatDatasourceOutput.
// FlatDatasourceOutput is an auto-generated flat version of DatasourceOutput.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*DatasourceOutput) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatDatasourceOutput)
}

// HCL2Spec returns the hcl spec of a DatasourceOutput.
// This spec is used by HCL to read the fields of DatasourceOutput.
// The decoded values from this spec will then be applied to a FlatDatasourceOutput.
func (*FlatDatasourceOutput) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"id":           &hcldec.AttrSpec{Name: "id", Type: cty.String, Required: false},
		"value":        &hcldec.AttrSpec{Name: "value", Type: cty.String, Required: false},
		"content_type": &hcldec.AttrSpec{Name: "content_type", Type: cty.String, Required: false},
		"tags":         &hcldec.AttrSpec{Name: "tags", Type: cty.Map(cty.String), Required: false},
	}
	return s
}
